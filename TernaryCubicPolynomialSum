#include<stdio.h>
#define max 100
struct stack{
    int I[max];
    int J[max];
    int flag;
}; 

void init(struct stack* p){
    p->flag=1;
    p->I[p->flag]=1;
    p->J[p->flag]=1;
}

void push(int i,int j,struct stack* p){
    p->I[++p->flag] = i;
    p->J[p->flag] = j;
}

int main(){
    int mg[max][max],i,j,n,m;
	int result[max][max];
    printf("请依次输入迷宫的长和宽：\n");
    scanf("%d%d",&n,&m);
    printf("请输入迷宫，出口为2，墙为1:\n");
    for(i=0;i<=n+1;i++){
        for(j=0;j<=m+1;j++){
            scanf("%d",&mg[i][j]);
			 result[i][j]=mg[i][j];
        }
    }

    struct stack search;
    struct stack *p;
    p=&search;
    init(p);
    int m1[4]={1,0,-1,0};
    int m2[4]={0,1,0,-1};
    i=j=1;
    while(mg[i][j]!=2){
        int fg=0,lim=0;
        for(int r=0;r<4;r++){
            if((mg[i+m1[r]][j+m2[r]]==0||mg[i+m1[r]][j+m2[r]]==2)){
                fg++;//判断是否存在拐点 
            }
        }
        for(int r=0;r<4;r++){
            if((mg[i+m1[r]][j+m2[r]]==0||mg[i+m1[r]][j+m2[r]]==2)){
                if(lim==0){//进行入栈操作 
                    if(mg[i+m1[r]][j+m2[r]]!=2){
                        mg[i+m1[r]][j+m2[r]]=1;
                    }
                    i=i+m1[r];
                    j=j+m2[r];
                    push(i,j,p);
                    lim++;//限制一次只能走一边 
                } 
            }
        }
        if(lim>1){//多分路口，标记一下 
            p->flag++;
            p->I[p->flag]=10;//10>8用来作为拐角标志
            p->J[p->flag]=10;
        }
        if(lim==0){//无路可走 
            while(p->I[p->flag]!=10){
                p->flag--;
            } 
            p->flag--;
            p->flag--;
        } 
    }
    printf("\n\n路线如下：\n");
    while(p->flag>=1) {
        if(p->I[p->flag]!=10){
            printf("(%d,%d) ",p->I[p->flag],p->J[p->flag]);
            result[p->I[p->flag]][p->J[p->flag]]=3;
        }
        p->flag--;
    }
    printf("\n\n转换为图形：\n");
    for(i=0;i<=n+1;i++){
        for(j=0;j<=m+1;j++){
        	if(result[i][j]==3){
        		printf("\033[32m■ \033[0m");
			}else{
				printf("□ "); 	
			}
            
        }
        printf("\n");
    }
    
    return 0;
}
